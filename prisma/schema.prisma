// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id // Clerk user ID
  email     String   @unique
  name      String?
  image     String?
  tokens    Int      @default(2450)
  plan      Plan     @default(PRO)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assistants    Assistant[]
  conversations Conversation[]
  TokenUsage    TokenUsage[]

  @@map("users")
}

model Assistant {
  id             String          @id @default(cuid())
  name           String
  type           AssistantType
  instructions   String
  welcomeMessage String
  deliveryMethod DeliveryMethod
  tone           String          @default("professional")
  responseLength String          @default("medium")
  status         AssistantStatus @default(DRAFT)
  interactions   Int             @default(0)
  tokensUsed     Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  userId String 
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversations Conversation[]

  @@map("assistants")
}

model Conversation {
  id         String             @id @default(cuid())
  userEmail  String?
  status     ConversationStatus @default(ACTIVE)
  summary    String?
  tokensUsed Int                @default(0)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  assistantId String
  assistant   Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  userId String // Clerk user ID
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages Message[]

  @@map("conversations")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  role      MessageRole
  tokens    Int         @default(0)
  createdAt DateTime    @default(now())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model TokenUsage {
  id          String   @id @default(cuid())
  userId      String
  assistantId String?
  operation   String // "create_assistant", "chat_message", "instruction_processing"
  tokens      Int
  description String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("token_usage")
}

enum AssistantType {
  SALES
  FEEDBACK
  SURVEY
}

enum DeliveryMethod {
  WIDGET
  LINK
}

enum AssistantStatus {
  ACTIVE
  PAUSED
  DRAFT
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  INCOMPLETE
}

enum MessageRole {
  USER
  ASSISTANT
}

enum Plan {
  STARTER
  PRO
  ENTERPRISE
}
